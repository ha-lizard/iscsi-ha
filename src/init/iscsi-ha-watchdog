#!/bin/bash
#
# chkconfig: 2345 99 01
# description: iscsi-ha-watchdog script version __VERSION__
# processname: iscsi-ha-watchdog

# shellcheck source=/dev/null

# Load function library
. /etc/init.d/functions

# Define constants
WATCH_INTERVAL="5"
PROCESS_NAME="iscsi-ha"
PROC_NAME="${PROCESS_NAME}-watchdog"
PID_FILE="/var/run/${PROC_NAME}.pid"
LOCK_FILE="/var/lock/subsys/${PROC_NAME}"
GLOBAL_CONF="/etc/iscsi-ha/iscsi-ha.load"
OVERRIDE_CONF="/etc/iscsi-ha/iscsi-ha.conf"
LIB_FUNCTIONS="/usr/lib64/iscsi-ha/iscsi-ha.func"

# Load necessary configuration files
source "$LIB_FUNCTIONS"
source "$GLOBAL_CONF"
source "$OVERRIDE_CONF"

#########################################
# Description: Monitor the iscsi-ha service and take appropriate actions
#########################################
check_process_status() {
  while true; do
    sleep "$WATCH_INTERVAL"
    status "$PROCESS_NAME" &>/dev/null
    local RETVAL=$?

    case "$RETVAL" in
    0)
      log "$PROCESS_NAME Watchdog: $PROCESS_NAME running - OK"
      ;;
    1)
      log "${PROCESS_NAME} Watchdog: ${PROCESS_NAME} is dead but pid file exists, starting ${PROCESS_NAME}"
      /etc/init.d/"${PROCESS_NAME}" start
      ;;
    2)
      log "${PROCESS_NAME} Watchdog: ${PROCESS_NAME} is dead but subsys locked, starting ${PROCESS_NAME}"
      /etc/init.d/"${PROCESS_NAME}" start
      ;;
    3)
      log "${PROCESS_NAME} Watchdog: ${PROCESS_NAME} is stopped, starting ${PROCESS_NAME}"
      /etc/init.d/"${PROCESS_NAME}" start
      ;;
    esac
  done
}

#########################################
# Description: Start the watchdog process.
#########################################
start_watchdog() {
  # Check if the watchdog process is already running
  if [[ -e "${PID_FILE}" ]]; then
    # Read each line (PID) from the PID file
    while read -r pid; do
      kill -0 "${pid}" 2>/dev/null
      RETVAL=$?
      if [[ ${RETVAL} -eq 0 ]]; then
        failure "${PROC_NAME} already running: ${pid} startup failed"
        echo "${PROC_NAME} already running: ${pid} startup failed"
        exit 1
      fi
    done <"${PID_FILE}" # Redirect PID_FILE to the while loop
  fi

  # Start the watchdog process
  if check_process_status; then
    touch "${LOCK_FILE}"
    touch "${PID_FILE}"
    pidof -x "${PROC_NAME}" >"${PID_FILE}"
    echo -n "Starting ${PROC_NAME}: "
    success
  else
    failure "${PROC_NAME} startup failed"
    echo "Failed to start ${PROC_NAME}"
    killproc "${PROC_NAME}" 2>/dev/null
    rm -f "${LOCK_FILE}" "${PID_FILE}"
    exit 1
  fi
  echo
}

#########################################
# Description: Stop the watchdog process.
#########################################
stop_watchdog() {
  echo -n "Stopping ${PROC_NAME}: "
  killproc "${PROC_NAME}" 2>/dev/null
  RETVAL=$?

  if [[ ${RETVAL} -eq 0 ]]; then
    rm -f "${LOCK_FILE}" "${PID_FILE}"
    success "${PROC_NAME} stopped"
  else
    warning "Failed to stop ${PROC_NAME}"
    echo "Error stopping ${PROC_NAME}"
    exit 1
  fi
  echo
}

#########################################
# Description: Check the status of the watchdog process.
#########################################
check_watchdog_status() {
  if [[ -e "${PID_FILE}" ]]; then
    if [[ -e "${PID_FILE}" ]]; then
      # Read each line (PID) from the PID file
      while read -r pid; do
        kill -0 "${pid}" 2>/dev/null
        RETVAL=$?
        if [[ ${RETVAL} -eq 0 ]]; then
          success "${PROC_NAME} running: ${pid}"
          echo "${PROC_NAME} running: ${pid}"
          exit 0
        fi
      done <"${PID_FILE}" # Redirect PID_FILE to the while loop
    fi

    warning "${PROC_NAME} is dead and ${PID_FILE} exists"
    echo "${PROC_NAME} is dead and ${PID_FILE} exists"
    exit 1
  elif [[ -e "${LOCK_FILE}" ]]; then
    warning "${PROC_NAME} is dead and ${LOCK_FILE} exists"
    echo "${PROC_NAME} is dead and ${LOCK_FILE} exists"
    exit 2
  else
    failure "${PROC_NAME} is not running"
    echo "${PROC_NAME} is not running"
    exit 3
  fi
}

# Main control flow based on input argument
case "$1" in
start)
  start_watchdog
  ;;
stop)
  stop_watchdog
  ;;
status)
  check_watchdog_status
  ;;
restart)
  stop_watchdog
  start_watchdog
  ;;
*)
  echo "Usage: $0 {start|stop|restart|status}"
  exit 1
  ;;
esac
exit 0

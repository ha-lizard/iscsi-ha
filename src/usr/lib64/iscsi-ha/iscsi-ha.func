#!/bin/bash
# shellcheck source=/dev/null
# shellcheck disable=SC2128
# BUG (??): shellcheck complain about FUNCNAME being an array

################################################################################
#                                                                               #
# iscsi-ha - High Availability framework for iSCSI cluster used in conjunction  #
# with XAPI based Xen Virtualization Environment (Xen Cloud Platform/XenServer) #
# Copyright 2024 Salvatore Costantino                                           #
# ha@ixi0.com                                                                   #
#                                                                               #
#                                                                               #
#    iscsi-ha is free software: you can redistribute it and/or modify           #
#    it under the terms of the GNU General Public License as published by       #
#    the Free Software Foundation, either version 3 of the License, or          #
#    (at your option) any later version.                                        #
#                                                                               #
#    iscsi-ha is distributed in the hope that it will be useful,                #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of             #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
#    GNU General Public License for more details.                               #
#                                                                               #
#    You should have received a copy of the GNU General Public License          #
#    along with iscsi-ha.  If not, see <http://www.gnu.org/licenses/>.          #
#                                                                               #
#################################################################################

#######################################
# Added in version 1.3.2
# Function to check for dangling logger
# threads that did not clear on forced
# exit or repetitive error due to bad
# config , etc. Prevents too many
# threads from accumulating which could
# make system unstable. Max count is
# hard coded for now at 20 threads
#
# Args passed in = none
########################################
function check_logger_processes() {
  log "$FUNCNAME" "Checking logger processes"
  LOG_PROCESS_COUNT=$(pgrep -f "$PROG_NAME".sh | wc -l)
  if [ "$LOG_PROCESS_COUNT" -gt 20 ]; then
    log "$FUNCNAME" "$LOG_PROCESS_COUNT log processes found, threshold is 20"
    LOG_PIDS=$(pgrep -f "$PROG_NAME".sh)
    log "$FUNCNAME" "Killing PIDs $LOG_PIDS"
    for i in "${LOG_PIDS[@]}"; do
      if kill "$i"; then
        log "$FUNCNAME" "Failed to kill PID $i"
      else
        log "$FUNCNAME" "Successfully killed PID $i"
      fi
    done
  else
    log "$FUNCNAME" "No processes to clear"
  fi
} # End function check_logger_processes

###########################################
# Get list of all IPs on this host and
# populate global array VAR LOCAL_IP_LIST
# Return 0 on success, or $? on failure
###########################################
function local_ip_list() {
  local -a local_ip_list
  mapfile -t local_ip_list < <($IP addr show | $GREP inet | awk -F "inet " '{print $2}' | awk -F "/" '{print $1}')
  local ret=$?
  if [ $ret -ne 0 ]; then
    log "Error retrieving local IP list on $HOST"
    return $ret
  else
    log "$FUNCNAME: Local IP list returned ${local_ip_list[*]}"
    return 0
  fi
} # End function local_ip_list

#########################################
# Function check_ip_health
# Uses ping to check if passed in IP is
# is responding.
#
# Arguments:
# arg1 = IP address
# arg2 = number of ping packets sent
#
# Exit Codes:
# 0 = 100% successful ping replies
# 1 = any error returned by ping
########################################
function check_ip_health() {
  if $PING -c "$2" -w 1 "$1" 1>/dev/null; then
    log "$FUNCNAME: $1 response = OK"
    return 0
  else
    log "$FUNCNAME: $1 response = FAIL"
    email "$FUNCNAME: [$1] response = FAIL" "1"
    return 1
  fi
}
########################################
# Function for sending email alerts
#
# One or two argument/string passed in
#
# If single argument - content of the message body
#
# If two arguments passed in
# arg1 = content of message body
# arg2 = alert severity level - used for raising alert
#
# returns 1 if message is a duplicate and
# sending is suppressed
#######################################
function email() {
  ##############################################
  # Check if iteration count file exists
  # if iteration count is less than 5 - suppress
  # email alerts to avoid sending useless alerts
  # while iscsi-ha initializes services that
  # were not really failed - were just stopped
  # since service may not have been running
  ##############################################
  if [ -f "$MAIL_SPOOL"/count ]; then
    CURRENT_COUNT=$(cat "$MAIL_SPOOL"/count)
    if [ "$CURRENT_COUNT" -lt 5 ]; then
      MAIL_ON=0
      log "$FUNCNAME: iteration: $CURRENT_COUNT is less than threshold - email suppressed"
    fi
  fi

  ##############################################
  # Version 1.4.1 April 2014 - suppress email
  # alerts if iscsi-ha is in manual mode
  ##############################################
  if [ -e /etc/iscsi-ha/state/manual ]; then
    MAIL_ON=0
  fi

  if [ "$MAIL_ON" = "1" ]; then
    ###############################################
    # Make sure the mail spool dir exists - if not
    # create it here. Mail spool is stored in ram
    # and will not survive a reboot.
    ###############################################
    if [ -d "$MAIL_SPOOL" ]; then
      log "$FUNCNAME" "Mail Spool Directory Found $MAIL_SPOOL"
    else
      if mkdir "$MAIL_SPOOL"; then
        log "$FUNCNAME" "Successfully created mail spool directory $MAIL_SPOOL"
      else
        log "$FUNCNAME" "Failed to create mail spool - not suppressing duplicate notices"
      fi
    fi
    ###############################################
    # Next - Clean mail spool - delete messages
    # Sanitize $MAIL_SPOOL to ensure there is NO
    # possibility of passing in an empty arg
    # due to bad config file, etc...
    ###############################################
    if [ ${#MAIL_SPOOL} -gt 1 ] && [ -d "$MAIL_SPOOL" ]; then
      FLUSH_MAIL_EXEC="find $MAIL_SPOOL/ -name *.msg -type f -mmin +$MAIL_SCREEN_TIME -delete"
      log "Ready to exec [${FLUSH_MAIL_EXEC}]"
      ${FLUSH_MAIL_EXEC}
      RETVAL=$?
      log "FLUSH_MAIL_EXEC returned [$RETVAL]"
      #find $MAIL_SPOOL/ -name *.msg -type f -mmin +$MAIL_SCREEN_TIME -delete
      #log "MAIL_SPOOL=[$MAIL_SPOOL]  MAIL_SCREEN_TIME=[$MAIL_SCREEN_TIME]"
    fi

    ##############################################
    # Setup message content - check num of args
    # passed in.
    ##############################################
    local MESSAGE_BODY="$1"
    if [ "$2" ]; then
      local ALERT_SEVERITY="$2"
    fi

    ########################################
    # Check for dup message
    #
    # Make sure there are files before looping
    # to prevent error messages
    ##########################################
    # Check if there are more than 2 messages in the spool directory
    if [ "$(find "$MAIL_SPOOL" -type f -name '*.msg' | wc -l)" -gt 2 ]; then
      # Iterate through each message in the spool directory
      for MESSAGE in "$MAIL_SPOOL"/*.msg; do
        # Remove spaces from both message content and the current message body
        MESSAGE_CONTENT=$(tr <"$MESSAGE" -d '[:space:]')
        MESSAGE_BODY_CLEAN=$(echo "$MESSAGE_BODY" | tr -d '[:space:]')

        # Compare cleaned message content with the body
        if [ "$MESSAGE_CONTENT" = "$MESSAGE_BODY_CLEAN" ]; then
          log "$FUNCNAME" "Duplicate message - not sending. Content = $MESSAGE_BODY"
          log "$FUNCNAME" "Message barred for $MAIL_SCREEN_TIME minutes"
          return 1
        fi
      done
    fi
    #######################################
    # If we are here - message is not a dup
    # not suppressing - continue
    #######################################
    NOW=$(date +'%H:%M:%S:%N -> Subject:')

    #######################################
    # Check if MAIL_USE_SHARED_PARAMS is
    # set and source mail settings from
    # ha-lizard params instead of local
    # iscsi-ha params in conf file
    #######################################
    if [ "$MAIL_USE_SHARED_PARAMS" -eq 1 ]; then
      log "$FUNCNAME: MAIL_USE_SHARED_PARAMS is set - sourcing ha-lizard mail settings"
      if $TIMEOUT 2 ha-cfg get -l grep 'SMTP\|MAIL' >"$MAIL_SHARED_SETTINGS"; then
        source "$MAIL_SHARED_SETTINGS"
      fi
    fi

    #############################
    # send the message
    #############################
    log "$FUNCNAME Sending ALERT email to $MAIL_TO: $MESSAGE_BODY"
    MAIL_TIME=$(date)
    $MAIL "$MAIL_FROM" "$MAIL_TO" "$MAIL_SUBJECT" "$MAIL_TIME" "$PROG_NAME Version: $VERSION" "$MESSAGE_BODY" "$SMTP_SERVER" "$SMTP_PORT" "$SMTP_USER" "$SMTP_PASS"

    #############################
    # Raise an alert
    #############################
    raise_alert "HA-Lizard Storage Controller Notice" "${MESSAGE_BODY}" "${ALERT_SEVERITY}"

    ###############################################
    # Write to sent spool to check for duplicates later
    # use Linux time as file name
    ###############################################
    MESSAGE_NAME=$(date +%s)
    touch "$MAIL_SPOOL"/"$MESSAGE_NAME".msg
    echo "$MESSAGE_BODY" >"$MAIL_SPOOL"/"$MESSAGE_NAME".msg
    log "$FUNCNAME" "Message copied to $MAIL_SPOOL/$MESSAGE_NAME.msg - Suppressing duplicates for $MAIL_SCREEN_TIME Minutes"
  fi
} #End function email

#########################################
# Function calculates number of bits in
# passed in subnet mask. Includes error
# checking to validate input.
#
# Arguments:
# arg1 = subnet mask in dotted decimal
#
# Returns:
# Global VAR: $BITS
#
# Exit Codes:
# 0 = no errors
# 1 = general error
#########################################
function mask_numbits() {
  BITS=0
  local COUNT=0
  RESTORE_IFS=$IFS
  IFS=.
  for octet in $1; do
    BYTE=
    COUNT=$((COUNT + 1))

    case $octet in
    255)
      local BYTE=255
      ((BITS += 8))
      ;;
    254)
      local BYTE=254
      ((BITS += 7))
      ;;
    252)
      local BYTE=252
      ((BITS += 6))
      ;;
    248)
      local BYTE=248
      ((BITS += 5))
      ;;
    240)
      local BYTE=240
      ((BITS += 4))
      ;;
    224)
      local BYTE=224
      ((BITS += 3))
      ;;
    192)
      local BYTE=192
      ((BITS += 2))
      ;;
    128)
      local BYTE=128
      ((BITS += 1))
      ;;
    0)
      local ZERO=true
      ;;
    *)
      log "$FUNCNAME: Invalid Subnet Mask [$1]. Check Configuration."
      email "$FUNCNAME: Invalid Subnet Mask [$1]. Check Configuration." "1"
      ERROR=1
      ;;
    esac

    if [ "$ZERO" = "true" ] && [ -n "$BYTE" ]; then
      log "$FUNCNAME: Invalid Subnet Mask [$1]. Check Configuration."
      email "$FUNCNAME: Invalid Subnet Mask [$1]. Check Configuration." "1"
      ERROR=1
      break
    fi
  done

  IFS=$RESTORE_IFS

  if [ "$ERROR" = "1" ]; then
    return 1
  else
    log "$FUNCNAME: Mask $1 contains $BITS bits."
    return 0
  fi
} #End function mask_numbits

##########################################
# Function check_drbd_resource_state
# checks whether passed in drbd resource
# name is primary or secondary
#
# Arguments:
# arg1 = drbd resource name
# arg2 = expected state (Primary or Secondary)
#
# Returns:
# none
#
# Exit Codes:
# 0 = arg2 expected and arg2 discovered
# 1 = arg2 expected and not discovered
#########################################
function check_drbd_resource_state() {
  local role
  role=$($DRBDADM role "$1" | awk -F "/" '{print $1}')

  if [ "$role" = "$2" ]; then
    log "$FUNCNAME: DRBD Resource: $1 in $2 mode"
    return 0
  elif [ -z "$(echo "$role" | tr -d '[:space:]')" ]; then
    log "$FUNCNAME: Error retrieving DRBD state for resource: [$1] - check configuration"
    email "$FUNCNAME: Error retrieving DRBD state for resource: [$1] - check configuration" "1"
    return 1
  else
    log "$FUNCNAME: DRBD Resource: [$1] in $role mode, expected in [$2] mode"
    email "$FUNCNAME: DRBD Resource: [$1] in $role mode, expected in [$2] mode" "1"
    return 1
  fi
} # End function check_drbd_resource_state

########################################
# Function xe_wrapper: timeout wrapper
# function to ensure that calls to xe
# do not exceed value set in XE_TIMEOUT
# All calls to xe must be passed through
# wrapper to prevent hanging iscsi-ha
# if the master node fails and is being
# actively recovered
#
# Any ($@) args to xe command  are passed
# in when calling xe with "$XE". Call
# xe with "xe" to bypass wrapper
########################################
function xe_wrapper() {
  # Execute the 'xe' command with a timeout
  $TIMEOUT "$XE_TIMEOUT" /usr/bin/xe "$@"

  # Check the exit status of the 'xe' command
  if [ $? -eq 124 ]; then
    # Log and email notification for timeout event
    log "$FUNCNAME" "COMMAND: xe " "$@" " has reached the maximum allowable time of $XE_TIMEOUT seconds. Killing all processes now!"
    email "$FUNCNAME" "COMMAND: xe " "$@" " has reached the maximum allowable time of $XE_TIMEOUT seconds. Killing all processes now!"

    # TODO: should here be a command to stop the the $PROG_NAME like in ha-lizard ?
  fi

} #End Function xe_wrapper

########################################
# Function mail_wrapper: timeout wrapper
# function to ensure that calls to mail
# do not exceed value set in MAIL_TIMEOUT
# All calls to 'mail' must be passed through
# wrapper to prevent hanging iscsi-ha
# if the smtp server hangs, which could
# occur in cases where a host is not
# using FQDN
#
# Any ($@) args to mail command  are passed
# in when calling mail with "$MAIL". Call
# mail with "mail" to bypass wrapper
########################################
function mail_wrapper() {
  $TIMEOUT "$MAIL_TIMEOUT" echo "$1" | /bin/mail -s "$NOW $MAIL_SUBJECT" "$MAIL_TO" -- -r "$MAIL_FROM" -v
  if [ $? = "124" ]; then
    log "$FUNCNAME COMMAND: mail " "$@" " Has reached the maximum allowable time of [$MAIL_TIMEOUT] seconds. Stopping"
    email "$FUNCNAME COMMAND: mail " "$@" " Has reached the maximum allowable time of [$MAIL_TIMEOUT] seconds. Stopping" "1"
  fi

} #End Function mail_wrapper

function auto_plug_pbd() {
  ##################################
  # Gather list of lvm over iscsi
  # SRs. XE returns comma separated
  # list of SR UUIDs
  ##################################
  SR_LIST=$($XE sr-list type=lvmoiscsi --minimal)
  if [[ -n ${SR_LIST} ]]; then
    log "$FUNCNAME: Found LVMoISCSI SR List: $SR_LIST"
    RESTORE_IFS=$IFS
    IFS=","
    for SR_UUID in "${SR_LIST[@]}"; do
      #####################################
      # Get list of PBDs to check for SR
      # on this iteration
      #####################################
      PBD=$($XE pbd-list sr-uuid="$SR_UUID" currently-attached=false --minimal)

      ######################################
      # Plug PBD if not attached
      ######################################
      if [[ -n ${PBD} ]]; then
        for PBD_UUID in "${PBD[@]}"; do
          if $XE pbd-plug uuid="$PBD_UUID"; then
            log "$FUNCNAME: Successfully plugged PBD: [$PBD_UUID] SR: [$SR_UUID]"
            email "$FUNCNAME: Successfully plugged PBD: [$PBD_UUID] SR: [$SR_UUID]" "4"
          else
            log "$FUNCNAME: Failed to plug PBD: [$PBD_UUID] SR: [$SR_UUID]"
            email "$FUNCNAME: Failed to plug PBD: [$PBD_UUID] SR: [$SR_UUID]" "1"
          fi
        done
      fi
    done
    IFS=$RESTORE_IFS
  else
    log "$FUNCNAME: Failed to locate LVMoISCSI SR - cannot check attach state"
  fi
} #End function auto_plug_pbd

########################################
# function to write to system log file
# /var/log/messages.
# Single argument/string passed in as
# content of the log entry
#
# no returns
#######################################
function log() {
  if [ "$ENABLE_LOGGING" = "1" ]; then
    $LOGGER -t iscsi-ha "$!" "$@"
  fi
} # End function log

function make_box() {
  local STRING="$*"
  local CHAR_HORIZONTAL="-"
  local CHAR_VERTICAL="|"
  local NUM_ROWS
  NUM_ROWS=$(echo "$*" | wc -l)

  if [ "$NUM_ROWS" -eq 1 ]; then
    local STRING_LEN=${#STRING}
  else
    #Find the length of the longest line
    local LENGTH=0
    RESTORE_IFS=$IFS
    IFS=$'\n'
    for line in "${STRING[@]}"; do
      local NEW_LENGTH=${#line}
      if [ "$NEW_LENGTH" -gt "$LENGTH" ]; then
        LENGTH=$NEW_LENGTH
      fi
    done
    IFS=$RESTORE_IFS
    local STRING_LEN=$LENGTH
  fi

  local HORIZ_LEN=$((STRING_LEN + 4))

  #create the top border
  local COUNT=0
  while [ $COUNT -lt $HORIZ_LEN ]; do
    echo -n "$CHAR_HORIZONTAL"
    COUNT=$((COUNT + 1))
  done

  echo

  #create the rows
  if [ "$NUM_ROWS" -eq 1 ]; then
    echo "$CHAR_VERTICAL $* $CHAR_VERTICAL"
  elif [ "$NUM_ROWS" -gt 1 ]; then
    RESTORE_IFS=$IFS
    IFS=$'\n'
    for line in "${STRING[@]}"; do
      NUM_SPACES=$((HORIZ_LEN - ${#line} - 4))
      COUNT=0
      SPACE=" "
      while [ $NUM_SPACES -gt $COUNT ]; do
        SPACE="$SPACE "
        COUNT=$((COUNT + 1))
      done
      line=${line//%/%%}
      printf "%s %s%s%s\n" "$CHAR_VERTICAL" "$line" "$SPACE" "$CHAR_VERTICAL"
    done
    IFS=$RESTORE_IFS
  fi

  #create the bottom border
  COUNT=0
  while [ $COUNT -lt $HORIZ_LEN ]; do
    echo -n "$CHAR_HORIZONTAL"
    COUNT=$((COUNT + 1))
  done
  echo
} #End function make_box

function make_target_drop_in() {
  mkdir -p "${TARGET_DROP_IN_DIR}"
  true >"${TARGET_DROP_IN_FILE}"
  for element in "${TGTD_DROP_IN_OPTS[@]}"; do
    echo "$element" >>"${TARGET_DROP_IN_FILE}"
  done
  systemctl daemon-reload
  return $?
} #End function make_target_drop_in

function service_execute() {
  ######################################################################
  ## Function service_execute
  ## Transparently calls either System V or systemd (via systemctl)
  ## to execute start,stop,restart,status on daemons
  ##
  ## Arg1=the service name
  ## Arg2=the action - one of [start|stop|restart|status]
  ##
  ## Returns: 0 or non-zero exit status per LSB
  ##
  ## LSB tries to set standard exit statuses for init script which
  ## are not explicitly followed by systemctl. We will try to follow
  ## LSB and make general assumptions where necessary
  ##
  ## This wrapper
  ##
  ##
  ## 0    program is running or service is OK
  ## 1    program is dead and /var/run pid file exists
  ## 2    program is dead and /var/lock lock file exists
  ## 3    program is not running
  ## 4    program or service status is unknown
  ## 5-99 reserved for future LSB use
  ## 100-149  reserved for distribution use
  ## 150-199  reserved for application use
  ## 200-254  reserved
  ## services control wrapper - start/stop/restart/status
  #####################################################################
  local SYSTEM_V_SCRIPTS='/etc/init.d/'
  local EXECUTE_SERVICE
  log "$FUNCNAME: Execute [ $2 ] on [ $1 ]"
  ####################################
  ## Am I System V or systemctl
  ####################################
  if [ -e $SYSTEM_V_SCRIPTS/"$1" ]; then
    ############################
    ## using system V init
    ############################
    log "$FUNCNAME: System V mode detected"
    EXECUTE_SERVICE=$(which service)
    RESULT=$(${EXECUTE_SERVICE} "$1" "$2")
    RETVAL=$?
    log "$FUNCNAME: $RESULT"
    log "$FUNCNAME: Returning exit status [ $RETVAL ]"
    SERVICE_EXECUTE_RESULT=$RESULT
    echo "$SERVICE_EXECUTE_RESULT"
    return $RETVAL
  else
    log "$FUNCNAME: systemctl mode being used"
    EXECUTE_SERVICE=$(which systemctl)
    RESULT=$(${EXECUTE_SERVICE} "$2" "$1")
    RETVAL=$?
    log "$FUNCNAME: $RESULT"
    log "$FUNCNAME: Returning exit status [ $RETVAL ]"
    SERVICE_EXECUTE_RESULT=$RESULT
    echo "$SERVICE_EXECUTE_RESULT"
    return $RETVAL
  fi
} # End function service_execute

#############################################
# function send_replication_network_arp
# sends a gratuitous ARP on the replication
# interface notifying the peer that the
# floating IP address is running here
#
# Args passed in = none
#############################################
function send_replication_network_arp() {
  log "$FUNCNAME: Sending ARP update to peer"

  local -a MY_REPLICATION_IP_ADDRESSES
  mapfile -t MY_REPLICATION_IP_ADDRESSES < <(ip -4 -f inet addr show "$DRBD_INTERFACE" | grep inet | awk '{print $2}' | awk -F '/' '{print $1}')
  log "$FUNCNAME: IP address list for [ $DRBD_INTERFACE ] = [ ${MY_REPLICATION_IP_ADDRESSES[*]} ]"
  for this_ip_address in "${MY_REPLICATION_IP_ADDRESSES[@]}"; do
    log "$FUNCNAME: Updating ARP for device [ $DRBD_INTERFACE ] IP [ $this_ip_address ]"
    "$ARPING" -U -I "$DRBD_INTERFACE" -U "$this_ip_address" -c 2 -w 2
  done

} #End function send_replication_network_arp

##############################################
# function send_network_bridge_arp _update
# sends an ARP broadcasting all of the IP
# addresses found on the specified XAPI
# bridge (ie. xapi0, xapi1, xenbr1, etc)
# Auto detects whether the network is a bond
# and sends ARP to each of the bond members
# in this case.
#
# Args Passed in:
#
# Arg1=XAPI network bridge name
#
# Returns:
#
# 0 on success
# 1 on general failure or partial errors
#############################################
function send_network_bridge_arp_all_members() {
  local bridge_name

  if [ $# -eq 0 ]; then
    log "$FUNCNAME: Missing mandatory argument [ bridge_name ]"
    return 1
  fi

  bridge_name="$1"
  log "$FUNCNAME: Processing ARP update for interface [ $bridge_name ]"

  local success=true
  local this_host_uuid
  local this_network_uuid
  local this_network_pif
  local this_network_pif_is_physical

  this_host_uuid=$(xe host-list hostname="$(hostname)" --minimal)
  this_network_uuid=$(xe network-list bridge="$bridge_name" --minimal)
  this_network_pif=$(xe pif-list network-uuid="$this_network_uuid" host-uuid="$this_host_uuid" --minimal)
  this_network_pif_is_physical=$(xe pif-param-get uuid="$this_network_pif" param-name=physical)

  #####################################
  # IF physical=true then this is a
  # single interface (not a bond)
  # fetch the name and find all IPs
  # and send ARP
  #####################################
  if [ "$this_network_pif_is_physical" = "true" ]; then
    log "$FUNCNAME: This is not a bond - getting device name"
    local this_network_pif_name
    this_network_pif_name=$(xe pif-param-get uuid="$this_network_pif" param-name=device)
    log "$FUNCNAME: Device name found [ $this_network_pif_name ]"

    local this_bridge_ip_addresses
    mapfile -t this_bridge_ip_addresses < <(ip -4 -f inet addr show "$bridge_name" | grep inet | awk '{print $2}' | awk -F '/' '{print $1}')
    log "$FUNCNAME: IP address list for [ $this_network_pif_name ] = [ ${this_bridge_ip_addresses[*]} ]"
    for this_ip_address in "${this_bridge_ip_addresses[@]}"; do
      log "$FUNCNAME: Updating ARP for device [ $this_network_pif_name ] IP [ $this_ip_address ]"
      "$ARPING" -U -I "$this_network_pif_name" "$this_ip_address" -c 1
      local retval=$?
      if [ $retval -ne 0 ]; then
        log "$FUNCNAME: Error sending ARP for device [ $this_network_pif_name ] IP [ $this_ip_address ]"
        success=false
      fi
    done

  else
    ###################################
    # physical != true.  This must be
    # a bond. Find all the interfaces
    # and IPs and send ARP for each
    # IP to each discrete I/F found
    ###################################
    log "$FUNCNAME: Checking if interface is a bond"
    local this_pif_bond_master_of
    this_pif_bond_master_of=$(xe pif-param-get uuid="$this_network_pif" param-name=bond-master-of)
    if [ ${#this_pif_bond_master_of} -eq 36 ]; then
      log "$FUNCNAME: Bond UUID [ $this_pif_bond_master_of ] validated - fetching bond device list"
      local this_bond_device_uuid_list
      mapfile -t this_bond_device_uuid_list < <(xe bond-param-get uuid="$this_pif_bond_master_of" param-name=slaves | tr -d ';')
      for pif_uuid in "${this_bond_device_uuid_list[@]}"; do
        local this_device_name
        this_device_name=$(xe pif-param-get uuid="$pif_uuid" param-name=device)
        log "$FUNCNAME: Device name found [ $this_device_name ]"

        local this_bridge_ip_addresses
        mapfile -t this_bridge_ip_addresses < <(ip -4 -f inet addr show "$bridge_name" | awk '/inet/ {split($2, addr, "/"); print addr[1]}')
        log "$FUNCNAME: IP address list for [ $this_device_name ] = [ ${this_bridge_ip_addresses[*]} ]"
        for this_ip_address in "${this_bridge_ip_addresses[@]}"; do
          log "$FUNCNAME: Updating ARP for device [ $this_device_name ] IP [ $this_ip_address ]"
          "$ARPING" -U -I "$this_device_name" "$this_ip_address" -c 1
          local retval=$?
          if [ $retval -ne 0 ]; then
            log "$FUNCNAME: Error sending ARP for device [ $this_network_pif_name ] IP [ $this_ip_address ]"
            success=false
          fi
        done
      done
    else
      log "$FUNCNAME: ERROR detecting link interface(s) for [ $DRBD_INTERFACE ]"
    fi
  fi

  ################
  ## return out ##
  ################
  if [ "$success" = "true" ]; then
    return 0
  else
    return 1
  fi
} #End function send_network_bridge_arp_all_members

##############################################
# function send_network_bridge_arp
# sends an ARP broadcasting all of the IP
# addresses found on the specified XAPI
# bridge (ie. xapi0, xapi1, xenbr1, etc)
#
# Args Passed in:
#
# Arg1=XAPI network bridge name
#
# Returns:
#
# 0 on success
# 1 on general failure or partial errors
#############################################
function send_network_bridge_arp() {
  if [ -z "$1" ]; then
    log "$FUNCNAME: Missing mandatory argument [ bridge_name ]"
    return 1
  fi
  log "$FUNCNAME: Processing ARP update for interface [ $1 ]"
  local success=true
  local bridge_name="$1"

  mapfile -t this_bridge_ip_addresses < <(ip -4 -f inet addr show "$bridge_name" | awk '/inet/ {split($2, addr, "/"); print addr[1]}')
  log "$FUNCNAME: IP address list for [ $bridge_name ] = [ ${this_bridge_ip_addresses[*]} ]"
  for this_ip_address in "${this_bridge_ip_addresses[@]}"; do
    log "$FUNCNAME: Updating ARP for device [ $bridge_name ] IP [ $this_ip_address ]"
    "$ARPING" -U -I "$bridge_name" "$this_ip_address" -c 1
    retval=$?
    if [ $retval -ne 0 ]; then
      log "$FUNCNAME: Error sending ARP for device [ $bridge_name ] IP [ $this_ip_address ]"
      success=false
    fi
  done

  ################
  ## return out ##
  ################
  if [ "$success" = "true" ]; then
    return 0
  else
    return 1
  fi
} #End function send_network_bridge_arp

#############################################
# function validate_drbd_resources_loaded
# validation checks for conditions where
# drbd is started before backing disks are
# available. Check to ensure at least
# one resource is loaded else return error
#
# Args passed in:
# none
#
# Returns:
# 0 on success
# 1 on no resources loaded
############################################

function validate_drbd_resources_loaded() {
  local drbd_load_state
  readarray -t drbd_load_state < <(wc -l </proc/drbd)
  log "$FUNCNAME: Checking DRBD has loaded with resources. Checking [ ${#drbd_load_state[@]} ] > [ 2 ]"
  if ((${#drbd_load_state[@]} <= 2)); then
    log "$FUNCNAME: No resources loaded"
    return 1
  else
    log "$FUNCNAME: Resources loaded"
    return 0
  fi
} #End function validate_drbd_resources_loaded

############################################
# function raise_alert
# sends a system alert through the HA-Lizard
# alerting logic. Requires that HA-Lizard be
# installed AND HA-Lizard has alert enabled
#
# Args passed in:
# Arg1: Alert name
# Arg2: Alert body
# Arg3: Alert severity
#
# Returns:
# 0 on success
# 1 on general error
############################################
function raise_alert() {
  log "$FUNCNAME: Raising system alert"
  if [ ! "$3" ]; then
    log "$FUNCNAME: Missing required arguments"
    return 1
  fi

  local HA_CFG='/etc/ha-lizard/scripts/ha-cfg'

  ##################################
  ## Make sure hs-cfg is installed
  ##################################
  if [ ! -e ${HA_CFG} ]; then
    log "$FUNCNAME: ha-cfg is not installed - cannot send alert"
    return 1
  else
    local ALERT_NAME="$1"
    local ALERT_BODY="$2"
    local ALERT_SEVERITY="$3"
    log "$FUNCNAME: ALERT_NAME [${ALERT_NAME}]"
    log "$FUNCNAME: ALERT_BODY [${ALERT_BODY}]"
    log "$FUNCNAME: ALERT_SEVERITY [${ALERT_SEVERITY}]"
    ${HA_CFG} raise-alert "${ALERT_NAME}" "${ALERT_BODY}" "${ALERT_SEVERITY}"
    return $?
  fi
} #End function raise_alert

#############################################################
# Function replication_link_check ()
#
# Check whether the replication link peer is responding
# and take measures to restore link if all conditions met
#
# Args passed in:
# Arg1: Link (bridge) interface name eg. xapi0, xapi1, etc
#
# Returns:
# 0 on success
# 1 on general error
##############################################################
function replication_link_check() {
  local INTERFACE=$1

  ###########################################################
  # Check if link state is up/down
  # if link state = down, nothing to do
  # if link state = up, further check if peer can be reached
  ###########################################################
  local SUCCESS=true

  #######################################
  # set the devices list for
  # the passed in bridge
  # ie. eth1,eth2,eth3
  # $interfaces is a , separated list
  #######################################
  if ! command -v networkd_db &>/dev/null; then
    SUCCESS=false
  fi

  if [ "$SUCCESS" = "true" ]; then
    eval "$(networkd_db -bridge "${INTERFACE}")"
    if [ -z "${interfaces}" ]; then
      SUCCESS=false
    else
      log "$FUNCNAME: Interfaces list set to [${interfaces}]"
    fi
  fi

  #########################################
  # check operstate for each device
  # that is part of the bridge and set
  # final link state to up or down
  #########################################
  if [ "$SUCCESS" = "true" ]; then
    local NUM_INTERFACES
    NUM_INTERFACES=$(echo "$interfaces" | awk -F ',' '{print NF}')
    local PRIMARY_INTERFACE
    PRIMARY_INTERFACE=$(echo "$interfaces" | awk -F ',' '{print $1}')
    log "$FUNCNAME: Number of interfaces for [${INTERFACE}] = [${NUM_INTERFACES}]"
    log "$FUNCNAME: primary interface set to [${PRIMARY_INTERFACE}]"
  fi

  if [ "$SUCCESS" = "true" ]; then
    LINK_STATE=down
    declare -A LINK_STATE_ARRAY
    log "$FUNCNAME: Working interface list [${interfaces}]"
    IFS=',' read -r -a interface_array <<<"${interfaces}"
    for dev in "${interface_array[@]}"; do
      local THIS_STATE
      THIS_STATE=$(<"/sys/class/net/${dev}/operstate")
      log "$FUNCNAME: Linkstate for [${dev}] is [${THIS_STATE}]"
      if [ "${THIS_STATE}" = "up" ]; then
        LINK_STATE_ARRAY["${dev}"]=up
        LINK_STATE=up
      else
        LINK_STATE_ARRAY["${dev}"]=down
      fi
    done

    ##################################################
    # We could have multiple interfaces in mixed
    # states. If $PRIMARY_INTERFACE != up, then try
    # to find another interface in the up state
    # resetting $PRIMARY_INTERFACE on a match
    # This ensures we down/up a currently active link
    ###################################################
    if [ "${LINK_STATE_ARRAY[${PRIMARY_INTERFACE}]}" != "up" ]; then
      SUCCESS=false
      log "$FUNCNAME: Primary interface [${PRIMARY_INTERFACE}] is down - looking for another interface in the up state"
      for alt_dev in "${interface_array[@]}"; do
        if [ "${LINK_STATE_ARRAY[${alt_dev}]}" = "up" ]; then
          log "$FUNCNAME: Found device [${alt_dev}] in up state. Setting primary interface to [${alt_dev}]"
          PRIMARY_INTERFACE="${alt_dev}"
          SUCCESS=true
          break
        fi
      done
    fi
  fi

  ############################################
  # if link = up, check peer IP
  # if peer IP check fails - call function
  # to attempt link restoration
  ############################################
  if [ "$SUCCESS" = "true" ] && [ "$LINK_STATE" = "up" ] && [ "$NUM_INTERFACES" -gt 1 ]; then
    local LOCAL_REPL_IP_LIST
    LOCAL_REPL_IP_LIST=$(ip -o -4 addr show "${INTERFACE}" | awk -F 'brd' '{print $1}' | grep --only-matching -E "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")
    local LOCAL_REPL_IP
    LOCAL_REPL_IP=$(echo "${LOCAL_REPL_IP_LIST}" | sed "s/${DRBD_VIRTUAL_IP}//" | tr -d '[:space:]')
    local REPL_IP_LIST
    REPL_IP_LIST=$(grep --only-matching -E "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" /etc/drbd.conf | sort | uniq)
    local PEER_REPL_IP
    PEER_REPL_IP=$(echo "${REPL_IP_LIST}" | sed "s/${LOCAL_REPL_IP}//" | tr -d '[:space:]')
    log "$FUNCNAME: Local repl IP = [${LOCAL_REPL_IP}] Peer repl IP = [${PEER_REPL_IP}]"

    if [[ $PEER_REPL_IP =~ [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ]]; then
      log "$FUNCNAME: Valid peer replication IP found [${PEER_REPL_IP}]"
      check_ip_health "${PEER_REPL_IP}" 1
      RETVAL=$?
      if [ $RETVAL -ne 0 ]; then
        log "$FUNCNAME: Peer replication interface on [${PEER_REPL_IP}] is not responding"

        #######################################
        ## If bond has more than 2 interfaces
        ## pass the entire list to the restore
        ## function as all interfaces will
        ## need to be reset
        #######################################
        if [ "$NUM_INTERFACES" -gt 2 ]; then
          restore_replication_link "$INTERFACE" "$interfaces"
        else
          restore_replication_link "$INTERFACE" "$PRIMARY_INTERFACE"
        fi
      else
        log "$FUNCNAME: Peer replication interface on [$PEER_REPL_IP] OK"
      fi
    fi
  else
    log "Link state for [$INTERFACE] is [$LINK_STATE]. Nothing to do"
  fi

} #End function replication_link_check

##############################################################
# Function restore_replication_link
#
# attempts to resolve issue with ARP
# being blocked sporadically on server
# reset when the link is a load balanced
# (balance-slb) bonded link with a bridge
# stacked on top
#
# IMPORTANT: This function should only be called if the
# peer replication IP is unreachable
#
# IMPORTANT2: Since this function is ONLY called from a master
# we don't need to run API calls through xe_wrapper. This
# function will call xe directly
#
# Args passed in:
# Arg1: Link (bridge) interface name eg. xapi0, xapi1, etc
# Arg2: interface to reset. Could be a single interface (eth0)
#       or a comma separated list (eth2,eth3,eth4)
#
# Returns:
# 0 on success
# 1 on general error
##############################################################

restore_replication_link() {
  # Initialize SUCCESS flag
  local SUCCESS=true
  local INTERFACE=$1
  local PRIMARY_INTERFACE=${2:-}
  local THIS_HOST_UUID NETWORK_UUID REPL_LINK_PIF_UUID REPL_LINK_BOND_UUID BOND_MODE

  # If no PRIMARY_INTERFACE passed, set SUCCESS to false
  if [ -z "$PRIMARY_INTERFACE" ]; then
    log "$FUNCNAME: No primary interface specified"
    SUCCESS=false
  fi

  # Proceed if SUCCESS is true
  if [ "$SUCCESS" = "true" ]; then
    # Retrieve THIS_HOST_UUID and check if the command was successful

    THIS_HOST_UUID=$($TIMEOUT 2 xe host-list hostname="$(hostname)" --minimal) || SUCCESS=false

    # Retrieve NETWORK_UUID and log the result
    if [ "$SUCCESS" = "true" ]; then
      NETWORK_UUID=$(xe network-list bridge="$INTERFACE" --minimal)
      log "$FUNCNAME: Found network uuid [$NETWORK_UUID]"
    fi
  fi

  # Validate NETWORK_UUID length
  if [ ${#NETWORK_UUID} -ne 36 ]; then
    SUCCESS=false
  fi

  # Proceed if SUCCESS is true
  if [ "$SUCCESS" = "true" ]; then
    # Retrieve REPL_LINK_PIF_UUID and log the result
    REPL_LINK_PIF_UUID=$(xe pif-list host-uuid="$THIS_HOST_UUID" network-uuid="$NETWORK_UUID" --minimal)
    log "$FUNCNAME: Found PIF uuid [$REPL_LINK_PIF_UUID]"
  fi

  if [ ${#REPL_LINK_PIF_UUID} -ne 36 ]; then
    SUCCESS=false
  fi

  # Proceed if SUCCESS is true
  if [ "$SUCCESS" = "true" ]; then
    # Retrieve REPL_LINK_BOND_UUID and log the result
    REPL_LINK_BOND_UUID=$(xe bond-list master="$REPL_LINK_PIF_UUID" --minimal)
    log "$FUNCNAME: Found bond uuid [$REPL_LINK_BOND_UUID]"
  fi

  # Validate REPL_LINK_BOND_UUID length
  if [ ${#REPL_LINK_BOND_UUID} -ne 36 ]; then
    SUCCESS=false
  fi

  # Proceed if SUCCESS is true
  if [ "$SUCCESS" = "true" ]; then
    # Retrieve BOND_MODE and log the result
    BOND_MODE=$(xe bond-param-get uuid="$REPL_LINK_BOND_UUID" param-name=mode)
    log "$FUNCNAME: Bond mode = [$BOND_MODE]"
  fi

  ###############################################
  ## work out whether we have conditions met to
  ## attempt restoring the replication link
  ##
  ## if success=true
  ##    num_interfaces > 1
  ##    bond_mode = balance_slb || active-backup
  ##    peer is not reachable (ICMP)
  ##    link state for devices is UP
  ## then
  ##    attempt to restore link by down/up the
  ##    primary device in the device list
  ################################################
  if [ "$SUCCESS" = "true" ] && [[ "$BOND_MODE" == "balance-slb" || "$BOND_MODE" == "active-backup" ]]; then
    log "$FUNCNAME: All conditions met to attempt restoration of replication link"

    # Handling for multiple or single interface
    if [[ "$PRIMARY_INTERFACE" =~ , ]]; then
      log "$FUNCNAME: Working multiple interfaces"
      # Reset multiple interfaces
      for this_if in ${PRIMARY_INTERFACE//,/ }; do
        log "$FUNCNAME: bringing down [$this_if]"
        ifconfig "$this_if" down &>/dev/null
      done
      for this_if in ${PRIMARY_INTERFACE//,/ }; do
        log "$FUNCNAME: bringing up [$this_if]"
        ifconfig "$this_if" up &>/dev/null
      done
    else
      log "$FUNCNAME: Resetting [$PRIMARY_INTERFACE]"
      ifconfig "$PRIMARY_INTERFACE" down &>/dev/null && ifconfig "$PRIMARY_INTERFACE" up &>/dev/null
    fi
  else
    log "$FUNCNAME: Conditions not met to attempt restoration of replication link"
    log "$FUNCNAME: SUCCESS=[$SUCCESS] BOND_MODE=[$BOND_MODE]"
  fi
} #End function restore_replication_link

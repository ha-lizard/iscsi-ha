#!/bin/bash

# shellcheck source=/dev/null

#################################################################################
#                                                                               #
# iscsi-ha - High Availability framework for iSCSI cluster used in conjunction  #
# with XAPI based Xen Virtualization Environment (Xen Cloud Platform/XenServer) #
# Copyright 2024 Salvatore Costantino                                           #
# ha@ixi0.com                                                                   #
#                                                                               #
# Licensed under GNU GPL v3.0                                                   #
#                                                                               #
#################################################################################

ISCSI_HA_INIT='/etc/iscsi-ha/iscsi-ha.load'
ISCSI_HA_FUNCTIONS='/etc/iscsi-ha/iscsi-ha.func'
IHA_IHA_CONF_FILE='/etc/iscsi-ha/iscsi-ha.conf'
IHA_DRBD_CONF_FILE='/etc/drbd.conf'
IHA_TGTD_CONF_FILE='/etc/tgt/conf.d/ha-targets.conf'
IHA_TGTD_ALTERNATE_CONF_FILE='/etc/tgt/targets.conf'
IHA_LVM_CONF_FILE='/etc/lvm/lvm.conf'
IHA_LVM_MASTER_CONF_FILE='/etc/lvm/master/lvm.conf'
ARCHIVE_FOLDER='/home'
POOL_UUID=$(xe pool-list --minimal)
declare -a CONFIG_MAP=(
  IHA_IHA_CONF
  IHA_DRBD_CONF
  IHA_TGTD_CONF
  IHA_TGTD_ALTERNATE_CONF
  IHA_LVM_CONF
  IHA_LVM_MASTER_CONF
  IHA_IPTABLES_CONF
)
declare -a CONF_FILE_LIST=(
  "$IHA_IHA_CONF_FILE"
  "$IHA_DRBD_CONF_FILE"
  "$IHA_TGTD_CONF_FILE"
  "$IHA_TGTD_ALTERNATE_CONF_FILE"
  "$IHA_LVM_CONF_FILE"
  "$IHA_LVM_MASTER_CONF_FILE"
)
THE_ACTION=$1
SUCCESS=true

if [ -z "$1" ]; then
  echo "Missing mandatory argument: save|restore|delete"
  exit 1
fi

# Function to issue a warning
warning() {
  echo "$1"
  SUCCESS=false
}

# Function to insert configuration data into the pool database
##
## inserts encoded string
## of the file contents
## or string content
## into pool configuration
## for the passed filename
##
## arg1: parameter key
## arg2: configuration file
############################
insert_into_map() {
  local PARAM_KEY="$1"
  local PARAM_VAL
  if [ -e "$2" ]; then
    # File exists, encode its contents
    PARAM_VAL=$(base64 -w 0 <"$2")
  else
    # Treat input as a string
    PARAM_VAL=$(echo -n "$2" | base64 -w 0)
  fi
  xe pool-param-set uuid="$POOL_UUID" other-config:"$PARAM_KEY"="$PARAM_VAL"
}

# Function to restore configuration data from the pool database
##
## restores configuration
## data from pool database
## into target configuration
## file.
##
## arg1: parameter key
## arg2: configuration file
############################
restore_from_map() {
  # Declare and initialize variables
  local PARAM_KEY="$1"
  local PARAM_VAL
  PARAM_VAL=$(xe pool-param-get uuid="$POOL_UUID" param-name=other-config param-key="$PARAM_KEY")
  local PARAM_FILE="$2"
  # Skipping IPTABLES restoration with detailed explanation
  if [[ "$PARAM_KEY" == *IPTABLES* ]]; then
    echo "Not restoring file [$PARAM_FILE]. Use fw_init instead."
    echo "Future releases of XCP/XenServer may modify default scripts."
    #############################################
    ## we are processing a FW script - do not
    ## restore since future releases of
    ## XCP/XenServer could change the default
    ## script and we don't want to get in the way.
    ## Replication network FW rules are now managed by
    ## iscsi-ha init script at runtime instead
    #############################################
    echo "Replication network FW rules are now managed by the iscsi-ha init script at runtime."
    return 0
  elif [[ "$PARAM_KEY" == *LVM* ]]; then
    # Restoring LVM configuration
    local THIS_STRING_CONTENT
    THIS_STRING_CONTENT=$(echo "$PARAM_VAL" | base64 -d)
    local THIS_PARAM_CONTENT
    THIS_PARAM_CONTENT=$(echo "$PARAM_VAL" | base64 -d)
    if [ ${#THIS_PARAM_CONTENT} -eq 0 ]; then
      echo "Parameter [$PARAM_KEY] is empty. Not restoring an empty value."
      return 1
    fi
    #############################################
    # we are processing a string in lvm.conf
    # if filter exists, replace it
    # else, find position in file and insert new
    #############################################
    if ! grep -q -E '^[[:space:]]*filter' "$PARAM_FILE"; then
      # Insert new filter into the "devices" section
      local LVM_DEVICES_LINE_BEGIN
      LVM_DEVICES_LINE_BEGIN=$(grep -n -E '^[[:space:]]*devices' /etc/lvm/lvm.conf | awk -F ':' '{print $1}')
      local LVM_INSERT_ROW_NUMBER=$((LVM_DEVICES_LINE_BEGIN + 1))
      echo "Inserting filter into [$PARAM_FILE] row [$LVM_INSERT_ROW_NUMBER]"
      sed -i "${LVM_INSERT_ROW_NUMBER}i ${THIS_STRING_CONTENT}" "$PARAM_FILE"
    else
      # Replace existing filter
      local FILTER_LINE_NUMBER
      FILTER_LINE_NUMBER=$(grep -n -E '^[[:space:]]*filter' "$PARAM_FILE" | awk -F ':' '{print $1}')
      echo "Replacing filter in [$PARAM_FILE] row [$FILTER_LINE_NUMBER]"
      sed -i "${FILTER_LINE_NUMBER}s!.*!${THIS_STRING_CONTENT}!" "$PARAM_FILE"
    fi
  else
    # Restoring a regular file
    local THIS_FILE_CONTENT
    THIS_FILE_CONTENT=$(echo "$PARAM_VAL" | base64 -d)
    echo "Restoring file [$PARAM_FILE] from pool configuration"
    if [ ${#THIS_FILE_CONTENT} -gt 0 ]; then
      echo "$THIS_FILE_CONTENT" >"$PARAM_FILE"
    else
      echo "Parameter [$PARAM_KEY] is empty. Not restoring an empty file."
    fi
  fi
}
###############################
## function archive_config
##
## creates a tarball including
## all relevant configuration
## files in a 2-node
## hyperconverged HA-Lizard
## cluster/pool
##############################
archive_config() {
  # Get the current timestamp
  local NOW
  NOW=$(date +%s)

  # Define the archive file name
  local ARCHIVE_FILE="${ARCHIVE_FOLDER}/ha-lizard-nosan-conf-files-all-${NOW}.tgz"

  # Start building the tar command
  local TAR_EXEC="tar -czf ${ARCHIVE_FILE}"

  # Add each file from the configuration file list if it exists
  for filename in "${CONF_FILE_LIST[@]}"; do
    if [ -e "$filename" ]; then
      echo "Adding [$filename] to archive"
      TAR_EXEC+="$filename "
    fi
  done

  # Create the archive
  echo "Creating archive [${ARCHIVE_FILE}]"
  eval "$TAR_EXEC"

  # Return the exit status of the tar command
  return $?
}

# Load shared functions and environment
if [ -e "$ISCSI_HA_INIT" ]; then
  source "$ISCSI_HA_INIT"
else
  echo "Missing required environment [$ISCSI_HA_INIT]"
  exit 1
fi

if [ -e "$ISCSI_HA_FUNCTIONS" ]; then
  source "$ISCSI_HA_FUNCTIONS"
else
  echo "Missing shared functions [$ISCSI_HA_FUNCTIONS]"
  exit 1
fi

# Ensure required parameters exist
#############################
## Insert config param if
## ! exist already
#############################
for param in "${CONFIG_MAP[@]}"; do
  if ! xe pool-param-get uuid="$POOL_UUID" param-name=other-config param-key="$param" &>/dev/null; then
    echo "Adding missing configuration parameter [$param]"
    if xe pool-param-add uuid="$POOL_UUID" param-name=other-config "$param"; then
      echo "Error adding parameter [$param] to database"
      exit 1
    fi
  fi
done

# Handle script actions
case "$THE_ACTION" in
save)
  for param in "${CONFIG_MAP[@]}"; do
    FILE_NAME="${param}_FILE"
    if [ -z "${!FILE_NAME}" ]; then
      continue
    fi
    echo "Processing [${!FILE_NAME}]"
    if [[ "$FILE_NAME" != *LVM* ]]; then
      insert_into_map "$param" "${!FILE_NAME}" || warning "Error processing [${!FILE_NAME}]"
    else
      ###########################
      ## Special case for LVM
      ## we only store the filter
      ## for LVM
      ###########################
      if [[ "${FILE_NAME}" == *LVM* ]]; then
        THIS_FILTER=$(grep -E '^[[:space:]]*filter' "${!FILE_NAME}")
        insert_into_map "$param" "$THIS_FILTER" || warning "Error processing [${!FILE_NAME}]"
      fi
    fi
  done
  ;;

restore)
  ############################
  ## Archive the current
  ## config before restoring
  ############################
  archive_config

  for param in "${CONFIG_MAP[@]}"; do
    FILE_NAME="${param}_FILE"
    restore_from_map "$param" "${!FILE_NAME}" || warning "Error processing [${!FILE_NAME}]"
  done
  ;;

delete)
  ###########################
  ## WARNING - this deletes
  ## all config data and
  ## keys from DB
  ###########################
  echo "W A R N I N G"
  echo "Are you sure you want to delete all database parameters and stored configuration data [y|n]?"
  read -r N1
  if [ "$N1" = "y" ]; then
    for key in "${CONFIG_MAP[@]}"; do
      echo "Removing [$key]"
      xe pool-param-remove uuid="$POOL_UUID" param-name=other-config param-key="$key"
    done
  else
    echo "Exiting..."
    exit 0
  fi
  ;;

*)
  echo "[$1] is not a valid input parameter"
  exit 1
  ;;
esac

if [ "$SUCCESS" = "false" ]; then
  echo "Job completed with errors"
  exit 1
else
  echo "Job completed successfully"
  exit 0
fi

#!/bin/bash
#################################################################################
# iscsi-ha - High Availability framework for iSCSI cluster                     #
# Used with XAPI-based Xen Virtualization Environment                          #
# Copyright 2024 Salvatore Costantino                                           #
# ha@ixi0.com                                                                   #
#                                                                               #
# Licensed under the GNU General Public License, version 3 or later.           #
#################################################################################
# shellcheck source=/dev/null
# Load configuration file
source /etc/iscsi-ha/iscsi-ha.conf || {
  echo "Error: Unable to source configuration file /etc/iscsi-ha/iscsi-ha.conf" >&2
  exit 1
}

# Variables
FW_CHAIN_NAME='RH-Firewall-1-INPUT'
IPTABLES_CONF='/etc/sysconfig/iptables'

# Log function for output to console or syslog
log() {
  local message="$1"
  local parent_process
  parent_process=$(ps -o comm= "${PPID}")

  if [ "$parent_process" != "iscsi-ha" ]; then
    if [[ "$message" == Waiting* ]]; then
      echo -ne "$message"
    else
      echo "$message"
    fi
  else
    # we were called by ! shell
    logger -t iscsi-ha "$message"
  fi
}

# Check if systemctl is available, fallback to SystemV if not
if ! command -v systemctl &>/dev/null; then
  log "SystemV host detected. Setting alias for systemctl."

  # Alias function for systemctl compatibility
  systemctl() {
    if [ "$1" = "is-enabled" ]; then
      echo "enabled"
    else
      service "$2" "$1"
    fi
  }
fi

# Exit with error message
exit_with_error() {
  log "$1"
  exit 1
}

# Check required dependencies
REQUIRED=(iptables awk)
for cmd in "${REQUIRED[@]}"; do
  if ! command -v "$cmd" &>/dev/null; then
    exit_with_error "Missing dependency: [$cmd]"
  fi
done

# Ensure the firewall is running before executing in case we are still booting
COUNT=600
FW_LIVE=false
FW_ENABLED_RESULT=$(systemctl is-enabled iptables || echo "disabled")

while [ $COUNT -gt 0 ]; do
  if ! systemctl status iptables &>/dev/null; then
    log "Waiting for firewall to start. Attempt [$COUNT]\r"
    COUNT=$((COUNT - 1))
    sleep 1

    if [ "$FW_ENABLED_RESULT" = "disabled" ]; then
      log "Firewall is disabled - exiting."
      exit 0
    fi
  else
    FW_LIVE=true
    break
  fi
done

if [ "$FW_LIVE" = false ]; then
  log "Something is wrong - attempting to start firewall."
  systemctl start iptables &>/dev/null || exit_with_error "Failed to start firewall."
else
  log "Firewall is running - continuing."
fi

# Validate that the chain exists in the firewall
if ! iptables --list "$FW_CHAIN_NAME" &>/dev/null; then
  log "Expected firewall chain [$FW_CHAIN_NAME] missing - switching to best effort."

  # Attempt to determine chain name dynamically
  #########################################################
  ## ONLY APPLIES IF CITRIX MAKES A CHANGE TO DEFAULT CHAIN
  ## Some logic to capture chain name changes that
  ## are out of our control. Best effort method tries
  ## to get chain name for a rule opening port 443.
  #########################################################
  ALT_CHAIN=$(grep 443 "$IPTABLES_CONF" | awk '{print $2}')
  if [ -n "$ALT_CHAIN" ]; then
    FW_CHAIN_NAME="$ALT_CHAIN"
  else
    exit_with_error "Cannot reliably determine firewall rules chain - aborting."
  fi
fi

# Configure replication subnet
REPLICATION_SUBNET=$(echo "$DRBD_VIRTUAL_IP" | awk -F '.' '{print $1"."$2"."$3"."0"/24"}')
FW_RULE_POSITION=$(iptables -L "$FW_CHAIN_NAME" --line-numbers | grep 'reject-with' | awk '{print $1}')
FW_RULE_CHECK="-A $FW_CHAIN_NAME -s $REPLICATION_SUBNET -j ACCEPT"
FW_RULE_MATCHES=$(iptables-save | grep -c "$FW_RULE_CHECK")

log "Checking for existing firewall rule: [$FW_RULE_CHECK]"
log "Firewall rule matches found: [$FW_RULE_MATCHES]"

if [ "$FW_RULE_MATCHES" -gt 0 ]; then
  log "An active firewall rule is already in place."
  if [ "$1" = "--save" ]; then
    service iptables save &>/dev/null || exit_with_error "Failed to save firewall rule."
  fi
  log "Successfully saved replication network [$REPLICATION_SUBNET] firewall rule."
  exit 0
fi

# Insert the firewall rule
if iptables -I "$FW_CHAIN_NAME" "$FW_RULE_POSITION" -s "$REPLICATION_SUBNET" -j ACCEPT; then
  log "Successfully loaded replication network [$REPLICATION_SUBNET] firewall rule."
  if [ "$1" = "--save" ]; then
    service iptables save &>/dev/null || exit_with_error "Failed to save firewall rule."
  fi
  log "Successfully saved replication network [$REPLICATION_SUBNET] firewall rule."
  exit 0
else
  exit_with_error "Failed to load replication network [$REPLICATION_SUBNET] firewall rule."
fi

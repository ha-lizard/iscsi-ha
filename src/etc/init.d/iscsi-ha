#!/bin/bash
# chkconfig: 2345 99 01
# description: iscsi-ha init script version __VERSION__
# processname: iscsi-ha

# shellcheck source=/dev/null

# Load function library
. /etc/init.d/functions

# Define constants and configuration paths
PROC_NAME="iscsi-ha"
WATCHDOG="${PROC_NAME}-watchdog"
WATCHDOG_EXEC="/etc/init.d/${WATCHDOG}"
PID_FILE="/var/run/${PROC_NAME}.pid"
LOCK_FILE="/var/lock/subsys/${PROC_NAME}"
EXECUTE_NAME="iscsi-ha.mon"
EXECUTE_STRING="/usr/libexec/iscsi-ha/${EXECUTE_NAME}"
EXECUTE_PID_FILE="/var/run/${EXECUTE_NAME}.pid"
GLOBAL_CONF="/etc/iscsi-ha/iscsi-ha.load"
OVERRIDE_CONF="/etc/iscsi-ha/iscsi-ha.conf"
CALLED_BY="$(ps -o comm= "$PPID")"
THIS_HOST_UUID_FILE="/etc/ha-lizard/state/local_host_uuid"

# Source configuration files
[ -f "$GLOBAL_CONF" ] && source "$GLOBAL_CONF"
[ -f "$OVERRIDE_CONF" ] && source "$OVERRIDE_CONF"

#########################################
# Function: xapi_init_check
# Description: Wait for XAPI initialization.
#########################################
xapi_init_check() {
  local COUNT=0

  logger -t "${PROC_NAME}-init" "Waiting for XAPI initialization"

  while [ "$COUNT" -lt 300 ]; do
    if [ -e "/var/run/xapi_init_complete.cookie" ]; then
      logger -t "${PROC_NAME}-init" "XAPI initialized on attempt [$COUNT]"
      return 0
    fi
    sleep 1
    COUNT=$((COUNT + 1))
  done

  logger -t "${PROC_NAME}-init" "Timeout waiting for XAPI to initialize"
  return 1
}

#########################################
# Function: fw_init_check
# Description: Ensure firewall is operational and replication network rule is active.
#########################################
fw_init_check() {
  /etc/iscsi-ha/scripts/fw_init
  return $?
}

#############################################
# Clear iteration count on cold start/restart (skip for status)
#############################################
if [[ "${1:-}" != "status" ]]; then
  if [[ -f "${MAIL_SPOOL}/count" ]]; then
    echo 0 >"${MAIL_SPOOL}/count"
  else
    mkdir -p "${MAIL_SPOOL}"
    echo 0 >"${MAIL_SPOOL}/count"
  fi
fi

#########################################
# Function: start
# Description: Start the iscsi-ha service.
#########################################
start() {
  # Ensure mandatory services are running before start
  xapi_init_check && fw_init_check
  local RETVAL=$?
  if [ "$RETVAL" -ne 0 ]; then
    failure "XAPI and firewall are required to start"
    echo "XAPI and firewall are required to start"
    exit 1
  fi

  # Handle special modes based on pool configuration
  #####################################
  ## If this is the first start after
  ## a dom0 major version upgrade
  ## we must start in the correct mode
  ## in case maintenance operations
  ## were previously underway
  #####################################
  local MANUAL_MODE_LIST
  local THIS_HOST_UUID

  MANUAL_MODE_LIST=$(xe pool-param-get uuid="$(xe pool-list --minimal)" param-name=other-config param-key=MANUAL_MODE)
  logger -t "${PROC_NAME}-init" "manual-mode status cache = [$MANUAL_MODE_LIST]"

  if [ -e "$THIS_HOST_UUID_FILE" ]; then
    THIS_HOST_UUID=$(<"$THIS_HOST_UUID_FILE")
  else
    THIS_HOST_UUID=$(xe host-list hostname="$HOST" --minimal)
  fi

  logger -t "${PROC_NAME}-init" "this host uuid = [$THIS_HOST_UUID]"

  case "$MANUAL_MODE_LIST" in
  *"${THIS_HOST_UUID}=enable"*)
    echo "" >/etc/iscsi-ha/state/manual
    logger -t "${PROC_NAME}-init" "Starting in manual mode"
    ;;
  *"${THIS_HOST_UUID}=primary"*)
    echo "become_primary" >/etc/iscsi-ha/state/manual
    logger -t "${PROC_NAME}-init" "Starting as primary node in manual mode"
    ;;
  *"${THIS_HOST_UUID}=secondary"*)
    echo "become_secondary" >/etc/iscsi-ha/state/manual
    logger -t "${PROC_NAME}-init" "Starting as secondary node in manual mode"
    ;;
  esac

  # Check if the service is already running
  if [ -e "$PID_FILE" ]; then
    if kill -0 "$(cat "$PID_FILE")" &>/dev/null; then
      failure "$PROC_NAME already running: $(cat "$PID_FILE") startup failed"
      echo "$PROC_NAME already running: $(cat "$PID_FILE") startup failed"
      exit 1
    fi
  fi

  # Start the service
  nohup "$EXECUTE_STRING" "$EXECUTE_PID_FILE" &>/dev/null &
  RETVAL=$?
  if [ "$RETVAL" -eq 0 ]; then
    touch "$LOCK_FILE"
    pgrep -of "$EXECUTE_STRING" >"$PID_FILE"

    if [[ "$WATCHDOG" != "$CALLED_BY"* ]]; then
      echo -n "Starting $PROC_NAME: "
      success
      echo
    fi

    if ! "$WATCHDOG_EXEC" status &>/dev/null; then
      "$WATCHDOG_EXEC" start
    fi

    exit 0
  else
    warning "$PROC_NAME start"
    echo "Error starting $PROC_NAME"
    rm -f "$LOCK_FILE" "$PID_FILE"
    exit 1
  fi
}

#########################################
# Function: stop
# Description: Stop the iscsi-ha service.
#########################################
stop() {
  echo -n "Stopping $PROC_NAME: "
  killproc "$PROC_NAME" 2>/dev/null
  local RETVAL=$?

  if [ "$RETVAL" -eq 0 ]; then
    pkill -f "$(basename "$EXECUTE_STRING")"
    rm -f "$LOCK_FILE" "$PID_FILE"

    if [ -e "$EXECUTE_PID_FILE" ]; then
      kill "$(cat "$EXECUTE_PID_FILE")" &>/dev/null
      rm -f "$EXECUTE_PID_FILE"
    fi

    echo
  else
    warning "$PROC_NAME stop"
    echo "Error stopping $PROC_NAME"
    failure
  fi
}

#########################################
# Function: status
# Description: Check the status of iscsi-ha.
#########################################
status() {
  if [ -e "$PID_FILE" ]; then
    local PID
    PID=$(cat "$PID_FILE")
    if kill -0 "$PID" 2>/dev/null; then
      success "$PROC_NAME running: $PID"
      echo "$PROC_NAME running: $PID"
      exit 0
    fi

    warning "$PROC_NAME is dead and /var/run pid file exists"
    echo "$PROC_NAME is dead and /var/run pid file exists"
    exit 1
  elif [ -e "$LOCK_FILE" ]; then
    warning "$PROC_NAME is dead and /var/lock lock file exists"
    echo "$PROC_NAME is dead and /var/lock lock file exists"
    exit 2
  else
    failure "$PROC_NAME is not running"
    echo "$PROC_NAME is not running"
    exit 3
  fi
}

# Handle command-line arguments
case "$1" in
start)
  start
  ;;
stop)
  stop
  ;;
status)
  status
  ;;
restart)
  stop
  start
  ;;
*)
  echo "Usage: $0 {start|stop|restart|status}"
  exit 1
  ;;
esac

exit 0
